#define STRICT
#define NOMINMAX
#include <opencv2/core/utility.hpp>
#include <opencv2/video/tracking.hpp>
#include <opencv2/videoio.hpp> // videoioのヘッダーをインクルード
#include <opencv2/highgui.hpp> // highguiのヘッダーをインクルード
#include <opencv2/imgproc.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/imgproc/imgproc_c.h>
#include <opencv2/highgui/highgui_c.h>
#include<opencv2/objdetect/detection_based_tracker.hpp>
#include <iostream>
#include<string>
#include<vector>
#include<stdio.h>
#include<math.h>
#include "resource.h"
#include<process.h>
#include <windows.h>
#include <windowsx.h>
#include <tchar.h>
#include "cserial.h"
#include<opencv2/opencv.hpp>
#include <opencv2/core.hpp>
#include <opencv2/video.hpp>
#include<cstring>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/tracking.hpp>
#include <numeric>      // std::iota
#include <algorithm>    // std::sort, std::stable_sort
#include <opencv2/video/background_segm.hpp>
#include <functional>
#include<stdlib.h>　//WM＿TIMERの精度が心配な時
#include<time.h>　　//WM＿TIMERの精度が心配な時
#include <string>
#include <sstream>
#define FCY 16000000UL
#include<cmath>
#ifdef _DEBUG
#pragma comment(lib, "opencv_world452d.lib")
#else
#pragma comment(lib, "opencv_world452.lib")
#endif

using namespace cv;
using namespace std;

int xb = 0, yb = 0;
int xq = 0, yq = 0;
int ct = 0;
int st = 0;
int dd = 0;
vector<int> edit_data(10);
//CSerialインスタンスの宣言
CSerial* cserial;
//ダイアログ関数プロトタイプの宣言
//BOOL CALLBACK DlgWndProc(HWND, UINT, WPARAM, LPARAM);
BOOL CALLBACK DlgWndProc(HWND, UINT, WPARAM, LPARAM);
//WinAPI関連
HWND hWnd;
MSG msg;

static int operation_status = 5;
int STATUS = 0, state = 0; //モード変数
int Endflag = 0;
int send_count = 0;
int up_flag = 0, down_flag = 0, right_flag = 0, left_flag = 0, in_flag = 0, out_flag = 0, stop_flag = 0;
static int encoder_pitch_data = 0;
static int encoder_yaw_data = 0;
static int encoder_zoom_data = 0;

unsigned int __stdcall camera(PVOID pv);
HANDLE threadHandle = NULL;

enum eCODE {
    OFFSET, RESET,
    START, STOP,
    R_UP, R_DOWN,
    L_UP, L_DOWN,
    SPEED_UP, SPEED_DOWN,
    SEND_DATA, DATA_CHECK,
    NEUTRAL,
    REMOVE_SCOPE, UP, DOWN, LEFT, RIGHT, ZOOM_IN, ZOOM_OUT, BREAK,
    LEFTIN, LEFTOUT, RIGHTIN, RIGHTOUT, UPIN, UPOUT, DOWNIN, DOWNOUT
};

int WINAPI WinMain(HINSTANCE hThisInst, HINSTANCE hPrevInst, LPSTR lpszArgs, int nWinMode)
{

    // (1)リソースに基づきダイアログボックスを作成する。自分で作ったダイアログのIDを合わせるように。
    hWnd = CreateDialog(hThisInst, MAKEINTRESOURCE(IDHELP), NULL, (DLGPROC)DlgWndProc);
    // ダイアログボックスが表示されない場合はプログラムを終了する。
    if (hWnd == NULL)
    {
        MessageBox(NULL, "ダイアログボックスのIDが間違っていませんか?", "終了", MB_OK);
        return 0;
    }

    // (2)ダイアログボックスを表示する。
    ShowWindow(hWnd, SW_SHOW);
    UpdateWindow(hWnd);

    // (3)メッセージループの実行を開始する(ダイアログ関数の処理を行う)。
    while (GetMessage(&msg, NULL, 0, 0))
    {
        TranslateMessage(&msg); // キーボードメッセージを変換する
        DispatchMessage(&msg);  // Windowsに制御を戻す
    }
    return msg.wParam;
}
/*
int WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPSTR szStr, int iCmdShow)

{
    //モーダルダイアログボックスを作成

    DialogBox(
        hInst,
        MAKEINTRESOURCE(IDD_DIALOG1),
        NULL,
        (DLGPROC)DlgWndProc);

    ShowWindow(hWnd, SW_SHOW);
    UpdateWindow(hWnd);

    while (GetMessage(&msg, NULL, 0, 0))
    {
        TranslateMessage(&msg); // キーボードメッセージを変換する
        DispatchMessage(&msg);  // 1つのウィンドウプロシージャにメッセージを送る
    }
    return msg.wParam;
    //return 0;

}
*/

BOOL CALLBACK DlgWndProc(HWND hWnd, UINT iMsg, WPARAM wParam, LPARAM lParam)
{
    TCHAR szstr[256] = _T("");
    DWORD dwThread;
    static int roll_data, yaw_data, pitch_data;
    static short int s_flag = 0;// ss_flag = 0;
    static bool file_write = 0;		//ファイルに記録するかどうか
    static int file_flag = 0, write_flag = 0;
    SYSTEMTIME systime;//時間記録用

    char FileName[127] = { "FILE_AD" };//ファイルの名前用の文字列

    //変数の宣言
    //シリアル通信用
    
    int check_data[2] = { 0,0 };			   //通信確認用

    //AD7150設定取得用
    unsigned static int ch2_data = 0, ch2_critical = 10000;	//ch2_data:筋収縮センサの値 ch2_critical:閾値
    unsigned static int ch1_data = 0, ch1_critical = 10000;	//ch1_data:加速度センサの値 ch1_critical:閾値
    static int VR = 0;//可変抵抗用

    static int speed_data = 0;//速度
    static int senser_threshold_per = 0;//閾値

    //グラフ表示関係
    static int g_scale = 1;  //data*g_scalse/12 表示調整
    //通信・ファイル出力操作用
    static int flags = 1;

    //カウンタ
    unsigned static int time_count = 0, Off_count = 0;

    static int neutral_count = 0;
    
    switch (iMsg)
    {
    case WM_INITDIALOG:
        //ダイアログボックスが生成されたとき
        Button_SetCheck(GetDlgItem(hWnd, IDC_BUTTON1), BST_CHECKED);
        cserial = new CSerial; 							// Cserialクラスを取得
        cserial->MakeBuffer(3, 10); 					// 送信用データを1byte、受信用データを4byte用意する。
        if (cserial->GetComNum(NULL) == 0) {
            MessageBox(hWnd, "接続を確認できません", "error", MB_OK);
            PostQuitMessage(0);
            //CSerialクラスの終了処理
            delete cserial;
            return 1;
        }
        //cserial->SetFindSerialPortName(0);
        cserial->SetSerialPortName("COM7");
        cserial->OpenSerialPort(); 					// シリアルポートをオープンする。
        cserial->SetSerialPort(115200, 1024, 1024);	// ボーレイトの設定
        cserial->SerialPortBufferClear(); 				// シリアルポートの送受信FIFOメモリをクリアする。
        return TRUE;
    case WM_COMMAND:

        SendMessage(GetDlgItem(hWnd, IDC_EDIT1), WM_SETFONT, (WPARAM)CreateFont(50, 0, 0, 0, FW_REGULAR, FALSE, FALSE, FALSE, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, PROOF_QUALITY, DEFAULT_PITCH, "ＭＳ Ｐゴシック"), MAKELPARAM(TRUE, 0));
        switch (LOWORD(wParam))
        {
        case IDC_BUTTON1:
            if (flags) {
                //SetWindowText(GetDlgItem(hWnd, IDC_EDIT1), _T("画面表示"));
                SetTimer(hWnd, 1, 1, NULL);//通信系
                //SetTimer(hWnd, 2, 1, NULL);//表示系
                //スレッド起動
                threadHandle = (HANDLE)_beginthreadex(NULL, 0, camera, NULL, 0, (unsigned int*)&dwThread);
                if (threadHandle != NULL) break;
                flags = 0;
            }
            else {
                KillTimer(hWnd, 1);
                KillTimer(hWnd, 2);
                flags = 1;
            }
            return 1;
        case IDC_BUTTON2:
            SetWindowText(GetDlgItem(hWnd, IDC_EDIT1), _T("確認"));
            STATUS = 0;
            send_count = 2;
            return 1;

        case IDC_BUTTON8:
            STATUS = 1;
            send_count = 1;
            return 1;
        }
        return 0;

    case WM_TIMER:
        
        switch (LOWORD(wParam)) {
        case 1:
            dd++;
            edit_data.clear();
            /*========================receive data========================================================-*/
            cserial->m_senddata[0] = (unsigned char)SEND_DATA;				//確認用データを代入する。
            cserial->SerialPortBufferClear();
            cserial->SendSerialData(1);										//確認用データを送信する。
            cserial->ReceiveSerialData(10);//0815
            
            //とりあえず28byte分のデータを受け取る
            for (int u = 0; u < 10; u++) {
                ///edit_data.at(u) = cserial->m_receivedata[u];
                edit_data.push_back(cserial->m_receivedata[u]);
            }
            
            if ((edit_data.at(0) == DATA_CHECK)&& (edit_data.at(9) == DATA_CHECK)) {//0と27番目のデータは確認用
                edit_data.at(2) <<= 8;			//19,20byte目はピッチエンコーダの値
                edit_data.at(1) |= edit_data.at(2);
                encoder_pitch_data = edit_data.at(1);

                edit_data.at(4) <<= 8;			//21,22byte目はヨーエンコーダの値
                edit_data.at(3) |= edit_data.at(4);
                encoder_yaw_data = edit_data.at(3);

                edit_data.at(6) <<= 8;			//23,24byte目はズームエンコーダの値
                edit_data.at(5) |= edit_data.at(6);
                encoder_zoom_data = edit_data.at(5);

                edit_data.at(8) <<= 8;            //25,26byte目は運用状態
                edit_data.at(7) |= edit_data.at(8);
                operation_status = edit_data.at(7);
            }

            /*===================================seda data==================================================*/
            switch (send_count) {
            case 1:	//マスターにSTRATという値を送る
                cserial->m_senddata[0] = (unsigned char)START;
                cserial->SerialPortBufferClear();
                cserial->SendSerialData(1);
                operation_status = 0;
                send_count = 0;
                break;

            case 2://マスターにSTOPという値を送る
                cserial->m_senddata[0] = (unsigned char)STOP;
                cserial->SerialPortBufferClear();
                cserial->SendSerialData(1);
                send_count = 0;
                break;

            case 19://マスターにNEUTRALという値を送る
                cserial->m_senddata[0] = (unsigned char)NEUTRAL;
                cserial->SerialPortBufferClear();
                cserial->SendSerialData(1);
                send_count = 0;
                break;

            case 20://マスターにREMOVE_SCOPEという値を送る
                cserial->m_senddata[0] = (unsigned char)REMOVE_SCOPE;
                cserial->SerialPortBufferClear();
                cserial->SendSerialData(1);
                send_count = 0;
                break;

            case 3:
                cserial->m_senddata[0] = (unsigned char)LEFT;
                cserial->SerialPortBufferClear();
                cserial->SendSerialData(1);
                send_count = 0;
                break;

            case 4:
                cserial->m_senddata[0] = (unsigned char)RIGHT;
                cserial->SerialPortBufferClear();
                cserial->SendSerialData(1);
                send_count = 0;
                break;

            case 5:
                cserial->m_senddata[0] = (unsigned char)UP;
                cserial->SerialPortBufferClear();
                cserial->SendSerialData(1);
                send_count = 0;
                break;

            case 6:
                cserial->m_senddata[0] = (unsigned char)DOWN;
                cserial->SerialPortBufferClear();
                cserial->SendSerialData(1);
                send_count = 0;
                break;

            case 7:
                cserial->m_senddata[0] = (unsigned char)ZOOM_IN;
                cserial->SerialPortBufferClear();
                cserial->SendSerialData(1);
                send_count = 0;
                break;

            case 8:
                cserial->m_senddata[0] = (unsigned char)ZOOM_OUT;
                cserial->SerialPortBufferClear();
                cserial->SendSerialData(1);
                send_count = 0;
                break;

            case 9:
                cserial->m_senddata[0] = (unsigned char)BREAK;
                cserial->SerialPortBufferClear();
                cserial->SendSerialData(1);
                send_count = 0;
                break;
            }
            return 1;

        case 2:
            
            //SendMessage(GetDlgItem(hWnd, IDC_EDIT2), WM_SETFONT, (WPARAM)CreateFont(50, 0, 0, 0, FW_REGULAR, FALSE, FALSE, FALSE, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, PROOF_QUALITY, DEFAULT_PITCH, "ＭＳ Ｐゴシック"), MAKELPARAM(TRUE, 0));
            SetDlgItemInt(hWnd, IDC_encoder_pitch, encoder_pitch_data, 1);//pitch location
            SetDlgItemInt(hWnd, IDC_encoder_yaw, encoder_yaw_data, 1);//yow location
            SetDlgItemInt(hWnd, IDC_encoder_zoom, encoder_zoom_data, 1);//zoom location
           
            
            //状態表示　初期値は3
            switch (operation_status) {
            case 0:
                SetWindowText(GetDlgItem(hWnd, IDC_EDIT2), _T("BREAK"));
                break;
            case 1:
                SetWindowText(GetDlgItem(hWnd, IDC_EDIT2), _T("PITCH"));
                break;
            case 2:
                SetWindowText(GetDlgItem(hWnd, IDC_EDIT2), _T("YAW"));
                break;
            case 3:
                SetWindowText(GetDlgItem(hWnd, IDC_EDIT2), _T("ZOOM IN"));
                break;
            case 4:
                SetWindowText(GetDlgItem(hWnd, IDC_EDIT2), _T("ZOOM OUT"));
                break;
            case 5:
                SetWindowText(GetDlgItem(hWnd, IDC_EDIT2), _T("now config"));
                break;
            }
            return 1;
        }
        break;
        // ×ボタンをクリックしたときの処理
    case WM_CLOSE:
        //ダイアログを破棄
        DestroyWindow(hWnd);
        //fclose(fp0);//ファイルを閉じる
        return 1;

        //終了(ウィンドウを閉じた後の)処理
    case WM_DESTROY:
        PostQuitMessage(0);
        //CSerialクラスの終了処理
        delete cserial;
        return 1;

    default:
        return FALSE;
    }
}

Mat templateMatch(Mat src, Mat tmp, Mat frame ,int num) {

    int sumx = 0, sumy = 0;
    const int __TARGET_NUM__ = 30;
    Mat output, dst;
    //dst = src.clone();
    dst = frame.clone();
    //テンプレートマッチング
    matchTemplate(src, tmp, output, TM_CCOEFF);
    //0~1の値に標準化
    normalize(output, output, 0, 1, NORM_MINMAX, -1, Mat());
    //2次元から1次元へ変換
    Mat one_row = output.reshape(1, 1);

    vector<float> one_row_vec;
    vector<float> one_row_index;

    //cv::Mat -> std::vector に変換
    one_row_vec.assign(one_row.begin<float>(), one_row.end<float>());
    vector<int> index(one_row_vec.size());

    //ソートインデックス配列用に整数列を作成する(0,1,2,3,4,5......)
    iota(index.begin(), index.end(), 0);

    //ソートをかける
    sort(index.begin(), index.end(), [&](int a, int b) {return one_row_vec[a] > one_row_vec[b]; });

    for (int i = 0; i < __TARGET_NUM__; i++) {
        //std::cout << index[i] << ":" << one_row_vec[index[i]] << std::endl;
        if (one_row_vec[index[i]] > 0.999) {
            ct++;
            // 1次元から2次元に変換 
            int x = index[i] % output.cols;
            int y = index[i] / output.cols;

            if (ct == 1) {
                Rect roi_rect = Rect(x, y, tmp.cols, tmp.rows);
                rectangle(dst, roi_rect, Scalar(0, 255, 255), 3);
                //printf("%lf\n", one_row_vec[index[i]]);
                xb = x;
                yb = y;
                
            }
            else if (ct > 1) {
                if (num == 1) {
                    if (abs(x - xb) < 30 && abs(y - yb) < 30) {
                        Rect roi_rect = Rect(x, y, tmp.cols, tmp.rows);
                        rectangle(dst, roi_rect, Scalar(0, 255, 255), 3);
                        //printf("%lf\n", one_row_vec[index[i]]);
                        xb = x;
                        yb = y;
                        st = 0;
                    }
                    else {
                        Rect roi_rect = Rect(x, y, tmp.cols, tmp.rows);
                        rectangle(dst, roi_rect, Scalar(0, 0, 255), 3);
                        //printf("%lf\n", one_row_vec[index[i]]);
                        xb = x;
                        yb = y;
                        send_count = 9;
                    }
                }
                else {
                    Rect roi_rect = Rect(x, y, tmp.cols, tmp.rows);
                    rectangle(dst, roi_rect, Scalar(0, 255, 255), 1);
                    //printf("%lf\n", one_row_vec[index[i]]);
                    xb = x;
                    yb = y;
                    st = 0;
                }
            }
            else {
                st++;
            }
        }
    }
    if (st > 50) {
        //exit(1);
    }

    return dst;
}

int Match(Mat src, Mat tmp) {

    int sumx = 0, sumy = 0;
    int match = 0;
    const int __TARGET_NUM__ = 30;
    Mat output;
    //テンプレートマッチング
    matchTemplate(src, tmp, output, TM_CCOEFF);
    //0~1の値に標準化
    normalize(output, output, 0, 1, NORM_MINMAX, -1, Mat());
    //2次元から1次元へ変換
    Mat one_row = output.reshape(1, 1);

    vector<float> one_row_vec;
    vector<float> one_row_index;

    //cv::Mat -> std::vector に変換
    one_row_vec.assign(one_row.begin<float>(), one_row.end<float>());
    vector<int> index(one_row_vec.size());

    //ソートインデックス配列用に整数列を作成する(0,1,2,3,4,5......)
    iota(index.begin(), index.end(), 0);

    //ソートをかける
    sort(index.begin(), index.end(), [&](int a, int b) {return one_row_vec[a] > one_row_vec[b]; });

    for (int i = 0; i < __TARGET_NUM__; i++) {
        //std::cout << index[i] << ":" << one_row_vec[index[i]] << std::endl;
        if (one_row_vec[index[i]] > 0.95) {
            match = 1;
        }
        else {
            match = 0;
        }
    }
    return match;
}

Mat Elimination(Mat frame_gry, Mat frame2) {
    Mat binaryframe;
    const double maxValue = 255.0;
    Mat kernel2 = getStructuringElement(cv::MORPH_RECT, cv::Size(9, 9));
    Mat black(Scalar::all(0));
    adaptiveThreshold(frame_gry, binaryframe, maxValue, ADAPTIVE_THRESH_MEAN_C, THRESH_BINARY, (5, 5), 3);
    for (int i = 0; i < 8; i++) {
        //erode(binaryImage, binaryImage, kernel);
        //dilate(binaryImage, binaryImage, kernel);
        morphologyEx(binaryframe, binaryframe, MORPH_OPEN, kernel2);
        medianBlur(binaryframe, binaryframe, 11);
    }
    bitwise_and(black, frame2, frame2, binaryframe);

    return frame2;
}

Mat Bit_Wise3(Mat img1, Mat img2, Mat img3) {
    Mat img1_gry, img2_gry, img3_gry, img_gryA, img_gryB, img_gry;
    cvtColor(img1, img1_gry, COLOR_BGR2GRAY);
    cvtColor(img2, img2_gry, COLOR_BGR2GRAY);
    cvtColor(img3, img3_gry, COLOR_BGR2GRAY);
    absdiff(img1_gry, img2_gry, img_gryA);
    absdiff(img1_gry, img2_gry, img_gryB);
    bitwise_and(img_gryA, img_gryB, img_gry);

    return img_gry;
}

int MatArea(Mat canny) {
    vector<int> Area(50000);
    dilate(canny, canny, Mat(), Point(-1, -1), 1);

    vector<vector<Point> > contours;
    findContours(canny, contours, RETR_TREE, CHAIN_APPROX_SIMPLE);

    Mat drawing = Mat::zeros(canny.size(), CV_8UC3);
    RNG rng(12345);

    for (size_t i = 0; i < contours.size(); i++) {
        Scalar color = cv::Scalar(rng.uniform(0, 256), rng.uniform(0, 256), rng.uniform(0, 256));
        drawContours(drawing, contours, (int)i, color);
        Area.at(i) = contourArea(contours[i]);
    }

    sort(Area.begin(), Area.end(), greater<int>());

    return Area.at(0);
}

int maxPointsearch(vector<KeyPoint> contours) {
    double maxy = contours.at(0).pt.y;
    int index = 0;
    for (int i = 1; i < contours.size(); i++) {
        if (maxy < contours.at(i).pt.y) {
            maxy = contours.at(i).pt.y;
            index = i;
        }
    }
    return index;
}

int minPointsearch(vector<KeyPoint> contours) {
    double miny = contours.at(0).pt.y;
    int index = 0;
    for (int i = 1; i < contours.size(); i++) {
        if (miny > contours.at(i).pt.y) {
            miny = contours.at(i).pt.y;
            index = i;
        }
    }
    return index;
}

Point minPoint(vector<KeyPoint> contours) {
    double minx = contours.at(0).pt.x;
    int index = 0;
    for (int i = 1; i < contours.size(); i++) {
        if (minx > contours.at(i).pt.x) {
            minx = contours.at(i).pt.x;
            index = i;
        }
    }
    return Point(contours.at(index).pt.x, contours.at(index).pt.y);
}

double TryangleArea(Point a, Point b, Point c) {
    double AB_x = (double)b.x - (double)a.x;
    double AB_y = (double)b.y - (double)a.y;
    double AC_x = (double)c.x - (double)a.x;
    double AC_y = (double)c.y - (double)a.y;
    double AREA = abs(AB_x * AC_y - AB_y * AC_x) * 0.5;

    return AREA;
}

int AkazeArea(Mat img) {
    auto algorithm = AKAZE::create();
    vector<KeyPoint> keypoint1;
    algorithm->detect(img, keypoint1);
    int b = keypoint1.size();
    if (b == 0) {
        return 0;
    }
    //vector<int> coordinate1_y(a);
    Point Gx = Point(0, 0);
    Point Gy = Point(0, 0);
    Point Gz = Point(0, 0);
    int minindex = minPointsearch(keypoint1);
    int maxindex = maxPointsearch(keypoint1);
    Gx = Point(keypoint1.at(minindex).pt.x, keypoint1.at(minindex).pt.y);
    Gy = Point(keypoint1.at(maxindex).pt.x, keypoint1.at(maxindex).pt.y);
    Gz = minPoint(keypoint1);
    double area = TryangleArea(Gx, Gy, Gz);

    return area;
}

unsigned int __stdcall camera(PVOID pv) {
    
    VideoCapture capture(0);
    //VideoCapture capture("WIN_20211202_12_01_48_Pro.mp4");
    if (!capture.isOpened()) {
        //error in opening the video input
        cerr << "Unable to open file!" << endl;
        return 0;
    }
    int w = 0;
    int s = 0;
    int c = 0;
    int origin_length = 0;
    int diff_Flag = 0;

    for (;;) {
        Mat img;
        capture >> img;
        imshow("view", img);
        if (waitKey(100) == 27) {
            break;
        }
    }
    Mat src,src2;
    capture >> src;

    //テンプレート画像
    Rect roi;
    Rect roi_origin = Rect(190, 70, 320, 300);
    roi = selectROI("tracker", src);
    if (roi.width == 0 || roi.height == 0) {
        return 0;
    }
    xq = roi.x;
    yq = roi.y;
    Mat tmp = src(roi);
    //Mat tmp = src.clone();
    Mat akaze1 = src(roi_origin).clone();
    auto algorithm = AKAZE::create();
    vector<KeyPoint> keypoint1, keypoint2;
    algorithm->detect(akaze1, keypoint1);
    Mat tmp_gry, binarytmp, tmp_gry1;
    Mat edge_roi,tmp_roi;

    Mat image, image_gry, image_gry1;
    Mat diff;
    cvtColor(tmp, tmp_gry, COLOR_BGR2GRAY);
    bilateralFilter(tmp_gry, tmp_gry1, 17, 40, 5);
    Canny(tmp_gry1, edge_roi, 50, 100, 3);
    diff = edge_roi.clone();
    //erode(edge_roi, edge_roi, Mat(), Point(-1, -1), 1);
    double shiro_edge = countNonZero(edge_roi);
    double edge_per = shiro_edge*100/(double(roi.width) * double(roi.height));
    Mat save=diff.clone();
    
    int up_flag = 0, down_flag = 0, left_flag = 0, right_flag = 0, stop_flag1 = 0;
    int in_flag = 0, out_flag = 0, stop_flag2 = 0;
    int White = 0, b_White = 0;
    int tooi = 0, tikai = 0;
    double percent = 0;
    int stop = 0;
    int clock = 0;
    int flag_stop = 0, flag_near = 0, flag_far = 0;
    int match = 0;
    double b_length = 0;
   
    const double threshold = 100.0;
    const double maxValue = 255.0;
    /*
    adaptiveThreshold(tmp_gry1, binarytmp, maxValue, ADAPTIVE_THRESH_MEAN_C, THRESH_BINARY, (3, 3), 3);
    Mat kernel1 = getStructuringElement(cv::MORPH_RECT, cv::Size(7, 7));
    for (int i = 0; i < 2; i++) {
        //erode(binaryImage, binaryImage, kernel);
        //dilate(binaryImage, binaryImage, kernel);
        morphologyEx(binarytmp, binarytmp, MORPH_OPEN, kernel1);
        medianBlur(binarytmp, binarytmp, 3);
    }
    Mat black(Scalar::all(0));
    bitwise_and(black, tmp, tmp, binarytmp);
    cvtColor(tmp, tmp, COLOR_BGR2GRAY);
    //threshold(tmp, tmp, 120, 255, THRESH_BINARY);//差分二値画像
    */
    //cv::threshold(tmp_gry1, tmp, 120, 255, THRESH_BINARY_INV);//差分二値画像
    //cv::threshold(edge_roi, tmp_roi, 120, 255, THRESH_BINARY);//差分二値画像

    cserial->m_senddata[0] = (unsigned char)START;
    cserial->SerialPortBufferClear();
    cserial->SendSerialData(1);
    send_count = 0;
    waitKey(500);//1秒待つ
    //DWORD start = GetTickCount64();
    for (;;) {
        Mat img1, img2,img3;
        Mat bin_img,bin_img2;
        Mat img1_gry, img1_gry1;
        Mat edge;
        Mat img3_gry;
        Mat src_img, src_gry, src_canny,src_erode;
        Rect roiroi = Rect(xb, yb, roi.width, roi.height);
        int match = 0;
        capture >> img1;
        capture >> img2;
        capture >> img3;
        src2 = img3.clone();
        src_img = src2.clone();
        image = src2.clone();
        Mat akazeimg = save.clone();
        Mat copy_edge;
        /*
        cvtColor(img1, img1_gry, COLOR_BGR2GRAY);
        bilateralFilter(img1_gry, img1_gry1, 17, 25, 5);
        */

        cvtColor(img3, img3_gry, COLOR_BGR2GRAY);
        Mat img_gry = Bit_Wise3(img1, img2, img3);
        edge = img_gry.clone();
        medianBlur(edge, edge, 5);
        Canny(edge, edge, 50, 100, 3, true);
        Canny(img_gry, img_gry, 50, 100, 3, true);
        copy_edge = edge_roi.clone();
        dilate(copy_edge, copy_edge, Mat(), Point(-1, -1), 5);
        
        Mat akaze2 = edge(roi_origin).clone();
        Mat akaze22 = akaze2.clone();
        algorithm->detect(akaze2, keypoint2);

        int b = keypoint2.size();
        if (b < 3) {
            continue;
        }
        Point Gx = Point(0, 0);
        Point Gy = Point(0, 0);
        Point Gz = Point(0, 0);
        int minindex = minPointsearch(keypoint2);
        int maxindex = maxPointsearch(keypoint2);
        //sort(coordinate1_x.begin(), coordinate1_x.end());
        //sort(coordinate1_y.begin(), coordinate1_y.end());
        //int min = *min_element(coordinate1_y.begin(), coordinate1_y.end());
        //int max = *max_element(coordinate1_y.begin(), coordinate1_y.end());
        Gx = Point(keypoint2.at(minindex).pt.x, keypoint2.at(minindex).pt.y);
        Gy = Point(keypoint2.at(maxindex).pt.x, keypoint2.at(maxindex).pt.y);
        Gz = minPoint(keypoint2);
        cvtColor(akaze22, akaze22, COLOR_GRAY2BGR);
        circle(akaze22, Gx, 10, Scalar(0, 0, 255), 3, 8);
        circle(akaze22, Gy, 10, Scalar(255, 0, 0), 3, 8);
        circle(akaze22, Gz, 10, Scalar(0, 255, 0), 3, 8);
        line(akaze22, Gx, Gy, Scalar(255, 0, 255), 4, 8);
        line(akaze22, Gx, Gz, Scalar(0, 255, 255), 4, 8);
        line(akaze22, Gy, Gz, Scalar(255, 255, 0), 4, 8);
        //double length = sqrt(pow((double)Gx.x - (double)Gy.x, 2.0) + pow((double)Gx.y - (double)Gy.y, 2.0));
        double length = abs(Gy.y - Gx.y);
        char value_c[256]; //次の行で使う一時的な変数
        sprintf(value_c, "%f", length); //変数の値も含めた表示したい文字列をchar型変数に格納
        putText(akaze22, value_c, Point(30, 40), FONT_ITALIC, 1.2, Scalar(255, 200, 100), 2);
        c++;
        
        imshow("en", akaze22);
        bitwise_and(src_img(roiroi), src_img(roiroi), image, copy_edge);

        if (c == 1) {
            origin_length = length;
            if (length < 200) {
                diff_Flag = 1;
            }
            else {
                diff_Flag = 0;
            }
        }
        else {
            percent = (double)origin_length / (double)length;
            if (percent > 0.97 && percent < 1.5) {
                stop = 1;
            }

            if (origin_length > length) {
                tooi++;
            }
            else {
                tikai++;
            }
        }

        if (c % 3 == 2) {
            flag_stop = 0;
            flag_far = 0;
            flag_near = 0;
            if (stop >0) {
                flag_stop = 1;
            }
            else {
                if (tooi > tikai) {
                    flag_far = 1;
                }
                else {
                    flag_near = 1;
                }
            }
            stop = 0;
            tooi = 0;
            tikai = 0;
        }
        else if (c % 100 == 99) {
            origin_length = length;
        }

        bin_img2 = bin_img.clone();
        
        Mat dst = templateMatch(edge, edge_roi, src2,match);
        roiroi.x = xb;
        roiroi.y = yb;
        
        match = Match(edge, diff);//tmp,stored
        
        //rectangle(dst, roi, Scalar(255, 55, 255), 3);
        if (diff_Flag == 1) {
            if (xq-xb>10) {

                putText(dst, "Left Over", Point(300, 400), FONT_ITALIC, 1.2, Scalar(255, 200, 100), 2);
                left_flag = 1;
                if (encoder_yaw_data > 680 && encoder_yaw_data < 750) {
                    xb = xb + 2;
                }
            }
            else if (xq-xb<-10) {
                putText(dst, "Right Over", Point(300, 400), FONT_ITALIC, 1.2, Scalar(255, 200, 100), 2);
                right_flag = 1;
                match = 0;
                if (encoder_yaw_data < 640 && encoder_yaw_data > 570) {
                    xb = xb - 2;
                }
            }
            else if (yq-yb>10) {

                putText(dst, "Up Over", Point(300, 400), FONT_ITALIC, 1.2, Scalar(255, 200, 100), 2);
                up_flag = 1;
                if (encoder_pitch_data > 470 && encoder_pitch_data < 480) {
                    yb = yb + 2;
                }
            }
            else if (yq-yb<-10) {

                putText(dst, "Down Over", Point(300, 400), FONT_ITALIC, 1.2, Scalar(255, 200, 100), 2);
                down_flag = 1;
                if (encoder_pitch_data < 430 && encoder_pitch_data > 420) {
                    yb = yb - 2;
                }
            }
            else {
                putText(dst, "Stop", Point(300, 400), FONT_ITALIC, 1.2, Scalar(255, 200, 100), 2);
                stop_flag1 = 1;
            }
        }
        else {

            if (flag_near == 1) {

                putText(dst, "near by", Point(300, 100), FONT_ITALIC, 1.2, Scalar(55, 200, 100), 2);
                //out_flag = 1;
                match = 0;
            }
            else if (flag_far == 1) {


                putText(dst, "far away", Point(300, 100), FONT_ITALIC, 1.2, Scalar(55, 200, 100), 2);
                //in_flag = 1;
                match = 0;
            }
            else {
                putText(dst, "Stop", Point(300, 100), FONT_ITALIC, 1.2, Scalar(55, 200, 100), 2);
                stop_flag1 = 1;

            }
        }
        if (left_flag == 1) {
            operation_status = 2;
            send_count = 3;
            left_flag = 0;
        }
        else if (right_flag == 1) {
            operation_status = 2;
            send_count = 4;
            right_flag = 0;
        }
        else if (up_flag == 1) {
            operation_status = 1;
            send_count = 5;
            up_flag = 0;
        }
        else if (down_flag == 1) {
            operation_status = 1;
            send_count = 6;
            down_flag = 0;
        }
        else if (in_flag == 1) {
            send_count = 7;
            in_flag = 0;
        }
        else if (out_flag == 1) {
            send_count = 8;
            out_flag = 0;
        }
        else if (stop_flag1 == 1) {
            send_count = 9;
            stop_flag1 = 0;
        }
        //rectangle(dst, roi_origin, Scalar(255, 55, 255), 3);
        imshow("output.png", dst);
        imshow("edge", edge);
        
        if (match == 0) {
            //edge_roi = diff;
            //Mat newimage = templateMatch(edge, save, src2, diff_Flag);
            Mat newimage = templateMatch(edge, diff, src2, match);
            roiroi.x = xb;
            roiroi.y = yb;
            edge_roi = edge(roiroi);
            //send_count = 9;
        }
        else {
            save = edge_roi;
            edge_roi = edge(roiroi);
        }
        imshow("save", diff);
        //imshow("png", edge_roi);
        //imshow("jpg", edge);
        xq = xb;
        yq = yb;
        //printf("%lf,%d,%d\n", end - processtime, xb, yb);
        //imshow("pngpng", binarytmp);
        waitKey(1);
        
        if (waitKey(33) == 27) {//breakは必須
            break;
        }
    }
    return 0;
}

